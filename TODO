new branch: simple redis client
redis_client.erl
redis.erl
redis_client_sup.erl

you can use the redis_client.erl singlely.
e.g 1(no registered name)
    {ok, Pid} = redis_client:start(Host, Port, Pass)
    %{ok, Pid} = redis_client:start_link(Host, Port, Pass)
    Redis = redics_client:handler(Pid),
    Redis:set("k1", "v1"),
    Redis:get("k1"),
    redis_client:stop(Redis)

e.g 2(with registered name)
    Name = redis_client:name(Host, Port),
    {ok, Pid} = redis_client:start(Host, Port, Pass, Name),
    Redis = redics_client:handler(Name),
    Redis:set("k1", "v1"),
    Redis:get("k1"),
    redis_client:stop(Redis)

you can also use the redis in OTP:
    your main supervisor:
    {redis_client_sup, {redis_client, start_link, []},
        permanent, 1000, worker, [redis_client]}

    start a redis client:
    Name = redis_client:name(Host, Port),
    {ok, _} = redis_cilent_sup:connect(Host, Port, Pass, Name),
    Redis = redis_client:handler(Name),
    Redis:set("k1", "v1"),

setup a pool to the same server:
    start redis client pool(5):
    [begin
        Name = redis_client:name(Host, Port, I)
        {ok, _} = redis_cilent_sup:connect(Host, Port, Pass, Name)
    end || I <- lists:seq(1, 5)],
    % random select a client
    Selected = redis_client:existing_name(Host, Port, random:uniform(5)),
    Redis = redis_client:handler(Selected),
    Redis:set("k1", "v1").
